using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class FollowCam : MonoBehaviour
{
    public Transform target; // 카메라가 추적할 대상
    public float moveDamping = 15f; // 이동속도 계수
    public float rotateDamping = 10f; // 회전속도 계수
    public float distance = 5f; // 추적 대상과의 거리
    public float height = 4f; // 추적 대상과의 높이
    public float targetOffset = 2f; // 추적 좌표의 오프셋

    Transform tr;

    [Header("벽 장애물 설정")]
    public float heightAboveWall = 7f;
    public float colliderRadius = 1.8f;
    public float overDamping = 5f;
    public float originHeight = 0f;

    void Start()
    {
        tr = GetComponent<Transform>();
        originHeight = height;
    }

    private void Update()
    {
        if (Physics.CheckSphere(tr.position, colliderRadius))
        {
            height = Mathf.Lerp(height, heightAboveWall, Time.deltaTime * overDamping);
        }
        else
        {
            height = Mathf.Lerp(height, originHeight, Time.deltaTime * overDamping);
        }
    }

    // 콜백함수 - 호출을 따로 하지 않아도 알아서 작동하는 함수.
    // 이벤트 트리거등 여러가지 사용법이 있음.
    void LateUpdate()
    {
        var camPos = target.position - (target.forward * distance) + (target.up * height);

        tr.position = Vector3.Slerp(tr.position, camPos, Time.deltaTime * moveDamping);
        // 보간함수검색. (점과 점의 연걸을 부드럽게 깎아줌)

        tr.rotation = Quaternion.Slerp(tr.rotation, target.rotation, Time.deltaTime * rotateDamping);
        // 유니티에서 사용하는 각도, 축들의 교착상태를 푸는데 사용

        tr.LookAt(target.position + (target.up * targetOffset));
        // 카메라를 꺾어서 타겟을 보게함.(캐릭터의 발을 향해 보고있는것을 정수리를 향하게 꺾어줌)
    }

    private void OnDrawGizmos()
    {
        Gizmos.color = Color.green;
        // DrawWireSphere(위치, 지름)
        // 선으로 이루어진 구형의 모양을 그림(씬뷰에만 표시됨, 디버그용)
        Gizmos.DrawWireSphere(target.position + (target.up * targetOffset), 0.1f);
        // 메인 카메라와 추적 지점 사이에 선을 그림.
        // 출발과 도착지점 사이에 선을 그림.
        Gizmos.DrawLine(target.position + (target.up * targetOffset), transform.position);
    }
}
